#############################################################
#                                                           #
#  Contents of file Copyright (c) Moogsoft Inc 2010         #
#                                                           #
#-----------------------------------------------------------#
#                                                           #
#  WARNING:                                                 #
#  THIS FILE CONTAINS UNPUBLISHED PROPRIETARY               #
#  SOURCE CODE WHICH IS THE PROPERTY OF MOOGSOFT INC AND    #
#  WHOLLY OWNED SUBSIDIARY COMPANIES.						#
#  PLEASE READ THE FOLLOWING AND TAKE CAREFUL NOTE:			#
#                                                           #
#  This source code is confidential and any person who      #
#  receives a copy of it, or believes that they are viewing	#
#  it without permission is asked to notify Phil Tee	    #
#  on 07734 591962 or email to phil@moogsoft.com.			#
#  All intellectual property rights in this source code     #
#  are owned by Moogsoft Inc.  No part of this source code  #
#  may be reproduced, adapted or transmitted in any form or	#
#  by any means, electronic, mechanical, photocopying,		#
#  recording or otherwise.									#
#                                                           *
#  You have been warned....so be good for goodness sake...	#
# 															#
#############################################################

#------------------------------------------------------------
# Essential configuration for the socket lam
#------------------------------------------------------------
{
	config : 
	{
		zone: "DEMO",
		"control channel":
		{
			"Multicast Address" : "225.0.0.1",
			"Port Number"		: 9001
		},
		#----------------------------------------
		# Define the object to be monitored
		#----------------------------------------
		monitor:
		{
            name        : "Socket Monitor",
            class       : "CSockMonitor",
            mode        : "SERVER",
			#address		: "0.0.0.0",
			address	: "localhost",
			port		: 8415
		},
		#----------------------------------------
		# LAM identification
		#----------------------------------------
		agent:
		{
            #---------------------------------------------
            # The agent name appears as $LamInstanceName
            # in the mapping rules below
            #---------------------------------------------
			name	                : "IMAPMail",
			log			: "/var/log/moogsoft/socket_lam.log",
            exit_after_initial_load : false
			#loadfile	         : "./historical.log"
		    },
                parsing:
                {
                    type: "start_and_end",
                    start_and_end:
                    {
                    	start:      ["MOOMAIL: "],
                    	end:        ["\n"],

                    	delimiters:
                        {
                        	#
                    		# By setting ignoreQuotes to true
                    		# quotes between delimiters are treated
                    		# as regular characters, and not used to
                    		# delimit tokens
                    		# so DL"blah "inside quote" blahDL
                    		# gives a token ["blah "inside quote" blah]
                    		#
                    		ignoreQuotes: true,
                    		#
                    		# Set stripQuotes to true to
                    		# remove start and end quotes from tokens
                  	  		# So "blah blah" becomes [blah blah]
                  	  		#
                   	 		stripQuotes: true,
                    		ignores:    "",
                    		delimiter:  ["\r"]
                        }
                    }
                },
        variables:
        [
            #
            # Note that positions start at 1, and go up
            # rather than array index style counting from zero
            #
            { name: "Identifier",   position: 1 },
            { name: "Node",         position: 2 },
            { name: "Serial",       position: 3 },
            { name: "Manager",      position: 4 },
            { name: "Class",        position: 5 },
            { name: "Agent",        position: 6 },
            { name: "ProbeHostName",position: 7 },
            { name: "AlertGroup",   position: 8 },
            { name: "Severity",     position: 9 },
            { name: "Summary",      position: 10 },
            { name: "LastOccurrence",position: 11 },
            { name: "InternalLast", position: 12 }
        ],
        constants:
        {
            severity:
            {
		"normal"	: 3,
		"low"		: 1,
		"high"		: 5,
		"urgent"	: 5
            }
        },
        conversions:
        {   
            sevConverter:
            {                   
                lookup: "severity",
                input:  "STRING",
                output: "INTEGER"
            },
            timeConverter:
            {
                timeFormat: "%D %T",
                input:      "STRING",
                output:     "INTEGER"
            },
            intConverter:
            {
                input:      "INTEGER",
                output:     "INTEGER"
            }
        },
	    #---------------------------------------------
	    # Describe how parsed parameters get mapped 
	    # to alert fields
	    #---------------------------------------------
	    mapping : 
	    {
	    builtInMapper:  "CJsonDecoder",
            catchAll: "overflow",
            rules:
            [
		        { name: "signature",rule:    	"$host:$subject" },
		        { name: "source_id",rule:    	"$subject" },
		        { name: "external_id",rule:  	"$external_id" },
		        { name: "manager",rule:      	"$name" },
		        { name: "source",rule:       	"$host" },
		        { name: "class",rule:        	"Mail" },
		        { name: "agent",rule:        	"$LamInstanceName" },
		        { name: "agent_location",rule:  "$address" },
		        { name: "type",rule:	        "Mail" },
		        { name: "severity",rule:	    "$severity",        conversion: "sevConverter"  },
		        { name: "description",rule:	    "$subject $text" },
		        { name: "first_occurred",rule:  "$created_at",  conversion: "intConverter" },
		        { name: "agent_time",rule:	    "$created_at",    conversion: "intConverter" }
            ]
	    },
        filter:
        {
            presend: "SocketLam.js"
        }
        
	}
}
